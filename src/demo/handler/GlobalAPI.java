package demo.handler;

import demo.util.APIContext;
import demo.util.UsageMap;
import generated.global.BFGlobalServiceStub;
import generated.global.BFGlobalServiceStub.APIRequestHeader;
import generated.global.BFGlobalServiceStub.APIResponseHeader;
import generated.global.BFGlobalServiceStub.EventType;
import generated.global.BFGlobalServiceStub.GetActiveEventTypes;
import generated.global.BFGlobalServiceStub.GetEventTypesReq;
import generated.global.BFGlobalServiceStub.GetEventTypesResp;
import generated.global.BFGlobalServiceStub.GetEvents;
import generated.global.BFGlobalServiceStub.GetEventsErrorEnum;
import generated.global.BFGlobalServiceStub.GetEventsReq;
import generated.global.BFGlobalServiceStub.GetEventsResp;
import generated.global.BFGlobalServiceStub.Login;
import generated.global.BFGlobalServiceStub.LoginErrorEnum;
import generated.global.BFGlobalServiceStub.LoginReq;
import generated.global.BFGlobalServiceStub.LoginResp;
import generated.global.BFGlobalServiceStub.Logout;
import generated.global.BFGlobalServiceStub.LogoutErrorEnum;
import generated.global.BFGlobalServiceStub.LogoutReq;
import generated.global.BFGlobalServiceStub.LogoutResp;

import generated.global.BFGlobalServiceStub.ConvertCurrency;
import generated.global.BFGlobalServiceStub.ConvertCurrencyErrorEnum;
import generated.global.BFGlobalServiceStub.ConvertCurrencyResp;
import generated.global.BFGlobalServiceStub.ConvertCurrencyReq;

import generated.global.BFGlobalServiceStub.GetAllCurrencies;
import generated.global.BFGlobalServiceStub.GetCurrenciesResp;
import generated.global.BFGlobalServiceStub.GetCurrenciesReq;

import generated.global.BFGlobalServiceStub.GetAllCurrenciesV2;
import generated.global.BFGlobalServiceStub.GetCurrenciesV2Resp;
import generated.global.BFGlobalServiceStub.GetCurrenciesV2Req;

import generated.global.BFGlobalServiceStub.GetAllEventTypes;

import org.apache.log4j.*;
import org.apache.axis2.transport.http.*;
        
public class GlobalAPI {

    private static BFGlobalServiceStub stub;
    
	// Lasy load the Global service stub generated by Apache Axis.
	// This stub is used to make all requests to the Betfair Global API
    // The global API is generally used for account management features
	private static BFGlobalServiceStub getStub() throws Exception {
		if (stub == null)
		{
			stub = new BFGlobalServiceStub("https://api.betfair.com/global/v3/BFGlobalService");

			// You may set up the connection parameters of the stub here if necessary
	        // For example: Wait 20 seconds for a response from the API
			stub._getServiceClient().getOptions().setTimeOutInMilliSeconds(20 * 1000);
			stub._getServiceClient().getOptions().setProperty(org.apache.axis2.transport.http.HTTPConstants.MC_ACCEPT_GZIP, "true");
			stub._getServiceClient().getOptions().setProperty(org.apache.axis2.transport.http.HTTPConstants.MC_GZIP_RESPONSE, "true");
		}
		return stub;
	}
	
	// Get the request header to add to the request
	private static APIRequestHeader getHeader(APIContext context) {
        APIRequestHeader header = new APIRequestHeader();
        // The header must have the session token attached.
        header.setSessionToken(context.getToken());
        return header;
	}
	
	// Save the data from the request header into the context
	private static void setHeaderDataToContext(APIContext context, APIResponseHeader header) {
		context.setToken(header.getSessionToken()); // May be updated in each call.
		context.setLastCall(header.getTimestamp().getTime());
	}

	// Fire a Web services login request
	public static void login(APIContext context, String username, String password) throws Exception {
		// Create a login request object
        LoginReq request = new LoginReq();
        
        // Set the parameters you wish to pass the the API
        request.setUsername(username);
        request.setPassword(password);
        request.setProductId(82); // 82 is the standard Free Access API
        request.setIpAddress(""); // Does not need to be set, but may not be null so use an empty string.

        // Create the Login message and attach the request to it.
        Login msg = new Login();
        msg.setRequest(request);
        
        // Send the request to the Betfair Service.
        LoginResp resp = getStub().login(msg).getResult();
        context.getUsage().addCall("login");
        
        // Check the response code, and throw and exception if the call failed
        if (resp.getErrorCode() != LoginErrorEnum.OK)
        {
        	throw new IllegalArgumentException("Failed to log in: "+resp.getErrorCode() + " Minor Error:"+resp.getMinorErrorCode()+ " Header Error:"+resp.getHeader().getErrorCode());
        }
        
        // Transfer the response data back to the API context
        setHeaderDataToContext(context, resp.getHeader());
	}
	
	// Fire a Web services logout request
		public static void logout(APIContext context) throws Exception {
			// Create a request object
	        LogoutReq request = new LogoutReq();
	        request.setHeader(getHeader(context));

	        // Create the Logout message and attach the request to it.
	        Logout msg = new Logout();
	        msg.setRequest(request);
	        
	        // Send the request to the Betfair Service.
	        LogoutResp resp = getStub().logout(msg).getResult();
	        context.getUsage().addCall("logout");
	       
	        // Check the response code, and throw and exception if the call failed
	        if (resp.getErrorCode() != LogoutErrorEnum.OK)
	        {
	        	throw new IllegalArgumentException("Failed to log out: "+resp.getErrorCode() + " Minor Error:"+resp.getMinorErrorCode()+ " Header Error:"+resp.getHeader().getErrorCode());
	        }
	        
	        setHeaderDataToContext(context, resp.getHeader());
		}
		
		// Get the markets available for the event specified
		public static GetEventsResp getEvents(APIContext context, int eventId) throws Exception {
			// Create a request object
	        GetEventsReq request = new GetEventsReq();
	        request.setHeader(getHeader(context));
	         // Set the parameter
	        request.setEventParentId(eventId);

	        // Create the GetActiveEventTypes message and attach the request to it.
	        GetEvents msg = new GetEvents();
	        msg.setRequest(request);
	        
	        // Send the request to the Betfair Service.
	        GetEventsResp resp = getStub().getEvents(msg).getResult();
	        context.getUsage().addCall("getEvents");
	        
	        // Check the response code, and throw and exception if the call failed
	        if (resp.getErrorCode() != GetEventsErrorEnum.OK)
	        {
	        	throw new IllegalArgumentException("Failed to retrieve events: "+resp.getErrorCode() + " Minor Error:"+resp.getMinorErrorCode()+ " Header Error:"+resp.getHeader().getErrorCode());
	        }

	        // Transfer the response data back to the API context
	        setHeaderDataToContext(context, resp.getHeader());

	        return resp;
		}	
	
		public static ConvertCurrencyResp convertCurrency(APIContext context, double amount, String fromCurrency, String toCurrency)throws Exception{
			// Create a request object
	        ConvertCurrencyReq request = new ConvertCurrencyReq();
	        request.setHeader(getHeader(context));
	         // Set the parameter
	        request.setAmount(amount);
	        request.setFromCurrency(fromCurrency);
	        request.setToCurrency(toCurrency);
	        // Create the GetActiveEventTypes message and attach the request to it.
	        ConvertCurrency msg = new ConvertCurrency();
	        msg.setRequest(request);
	        
	        // Send the request to the Betfair Service.
	        ConvertCurrencyResp resp = getStub().convertCurrency(msg).getResult();
	        context.getUsage().addCall("convertCurrency");
	        
	        // Check the response code, and throw and exception if the call failed
	        if (resp.getErrorCode() != ConvertCurrencyErrorEnum.OK)
	        {
	        	throw new IllegalArgumentException("Failed to retrieve events: "+resp.getErrorCode() + " Header Error:"+resp.getHeader().getErrorCode());
	        }

	        // Transfer the response data back to the API context
	        setHeaderDataToContext(context, resp.getHeader());

	        return resp;
		}
		
	// Get the active event types within the system (on both exchanges)
	public static EventType[] getActiveEventTypes(APIContext context) throws Exception {
		// Create a request object
        GetEventTypesReq request = new GetEventTypesReq();
        request.setHeader(getHeader(context));
        
        // Create the GetActiveEventTypes message and attach the request to it.
        GetActiveEventTypes msg = new GetActiveEventTypes ();
        msg.setRequest(request);
        
        // Send the request to the Betfair Service.
        GetEventTypesResp resp = getStub().getActiveEventTypes(msg).getResult();
        context.getUsage().addCall("getActiveEventTypes");
        
        // Check the response code, and throw and exception if the call failed
        if (resp.getErrorCode() != GetEventsErrorEnum.OK)
        {
        	throw new IllegalArgumentException("Failed to retrieve active event types: "+resp.getErrorCode() + " Minor Error:"+resp.getMinorErrorCode()+ " Header Error:"+resp.getHeader().getErrorCode());
        }

        // Transfer the response data back to the API context
        setHeaderDataToContext(context, resp.getHeader());

        return resp.getEventTypeItems().getEventType();
	}
	
	// Get the active event types within the system (on both exchanges)
		public static GetCurrenciesResp getCurrencies(APIContext context) throws Exception {
			// Create a request object
	        GetCurrenciesReq request = new GetCurrenciesReq();
	        request.setHeader(getHeader(context));
	        
	        // Create the GetActiveEventTypes message and attach the request to it.
	        GetAllCurrencies msg = new GetAllCurrencies();
	        msg.setRequest(request);
	        
	        // Send the request to the Betfair Service.
	        GetCurrenciesResp resp = getStub().getAllCurrencies(msg).getResult();
	        context.getUsage().addCall("getAllCurrencies");
	        
	        // Transfer the response data back to the API context
	        setHeaderDataToContext(context, resp.getHeader());

	        return resp;
		}

		// Get the active event types within the system (on both exchanges)
				public static GetCurrenciesV2Resp getCurrenciesV2(APIContext context) throws Exception {
					// Create a request object
			        GetCurrenciesV2Req request = new GetCurrenciesV2Req();
			        request.setHeader(getHeader(context));
			        
			        // Create the GetActiveEventTypes message and attach the request to it.
			        GetAllCurrenciesV2 msg = new GetAllCurrenciesV2();
			        msg.setRequest(request);
			        
			        // Send the request to the Betfair Service.
			        GetCurrenciesV2Resp resp = getStub().getAllCurrenciesV2(msg).getResult();
			        context.getUsage().addCall("getAllCurrenciesV2");
			        
			        // Transfer the response data back to the API context
			        setHeaderDataToContext(context, resp.getHeader());

			        return resp;
				}

				// Get the markets available for the event specified
				public static GetEventTypesResp getAllEventTypes(APIContext context) throws Exception {
					// Create a request object
			        GetEventTypesReq request = new GetEventTypesReq();
			        request.setHeader(getHeader(context));
			        
			        // Create the GetActiveEventTypes message and attach the request to it.
			        GetAllEventTypes msg = new GetAllEventTypes();
			        msg.setRequest(request);
			        
			        // Send the request to the Betfair Service.
			        GetEventTypesResp resp = getStub().getAllEventTypes(msg).getResult();
			        context.getUsage().addCall("getAllEventTypes");
			        
			        // Check the response code, and throw and exception if the call failed
			        if (resp.getErrorCode() != GetEventsErrorEnum.OK)
			        {
			        	throw new IllegalArgumentException("Failed to retrieve events: "+resp.getErrorCode() + " Minor Error:"+resp.getMinorErrorCode()+ " Header Error:"+resp.getHeader().getErrorCode());
			        }

			        // Transfer the response data back to the API context
			        setHeaderDataToContext(context, resp.getHeader());

			        return resp;
				}			

}
